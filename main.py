import nvdlib
from datetime import datetime, timezone, timedelta
import requests
import smtplib
import json
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

# ================= C·∫§U H√åNH EMAIL =================
# C√†i ƒë·∫∑t Gmail - C·∫ßn t·∫°o App Password trong Google Account
GMAIL_USER = os.environ.get("GMAIL_USER", "your_email@gmail.com")  # Email g·ª≠i
GMAIL_PASSWORD = os.environ.get("GMAIL_PASSWORD", "your_app_password")  # App Password (kh√¥ng ph·∫£i m·∫≠t kh·∫©u th∆∞·ªùng)
RECIPIENTS = os.environ.get("RECIPIENTS", "hoangthaifc01@gmail.com,ldhoang@vietinbank.vn").split(",")  # Danh s√°ch email nh·∫≠n

# ================= C·∫§U H√åNH CVE =================
# Th·ªùi gian
pubStartDate = (datetime.now(timezone.utc) - timedelta(days=20)).strftime("%Y-%m-%d %H:%M")
pubEndDate   = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M")
after_date   = (datetime.now(timezone.utc) - timedelta(days=20)).strftime("%Y-%m-%d")

# Ch·ªçn m·ª©c ƒë·ªô CVE mu·ªën l·∫•y: CRITICAL, HIGH, MEDIUM, LOW, ALL
severity_filter = "ALL"

# Danh s√°ch CPE ch√≠nh x√°c cho Windows Server c√°c b·∫£n
cpe_map = {
    "cpe:2.3:o:microsoft:windows_server_2008:-:*:*:*:*:*:*:*": "Windows Server 08",
    "cpe:2.3:o:microsoft:windows_server_2008:r2:*:*:*:*:*:*:*": "Windows Server 08 R2",
    "cpe:2.3:o:microsoft:windows_server_2012:-:*:*:*:*:*:*:*": "Windows Server 12",
    "cpe:2.3:o:microsoft:windows_server_2012:r2:*:*:*:*:*:*:*": "Windows Server 12 R2",
    "cpe:2.3:o:microsoft:windows_server_2016:-:*:*:*:*:*:*:*": "Windows Server 16",
    "cpe:2.3:o:microsoft:windows_server_2019:-:*:*:*:*:*:*:*": "Windows Server 19",
    "cpe:2.3:o:microsoft:windows_server_2022:-:*:*:*:*:*:*:*": "Windows Server 22",
    "cpe:2.3:o:microsoft:windows_server_2025:-:*:*:*:*:*:*:*": "Windows Server 25",
}

# Dict l∆∞u CVE
cve_dict = {}
windows_cve_found = False  # Flag ƒë·ªÉ theo d√µi c√≥ CVE Windows n√†o kh√¥ng

print(f"üîç T√¨m ki·∫øm CVE t·ª´ {pubStartDate} ƒë·∫øn {pubEndDate}")
print("="*60)

# ------------------- L·∫•y CVE t·ª´ NVD -------------------
print("üìä ƒêang t√¨m CVE Windows t·ª´ NVD...")

for cpe, short_name in cpe_map.items():
    try:
        kwargs = {
            "cpeName": cpe,
            "pubStartDate": pubStartDate,
            "pubEndDate": pubEndDate,
            "limit": 50
        }
        if severity_filter != "ALL":
            kwargs["cvssV3Severity"] = severity_filter  # l·ªçc theo severity

        results = nvdlib.searchCVE(**kwargs)

        cve_count_for_this_version = 0
        for cve in results:
            cve_id = cve.id
            score = cve.score[2] if cve.score else "N/A"
            desc = cve.descriptions[0].value if cve.descriptions else "No description"
            severity = cve.score[0] if cve.score else "UNKNOWN"

            if cve_id not in cve_dict:
                cve_dict[cve_id] = {
                    "severity": severity,
                    "score": score,
                    "desc": desc,
                    "affected": set(),
                    "source": set(),
                    "created": getattr(cve, 'published', 'N/A'),
                    "updated": getattr(cve, 'lastModified', 'N/A')
                }
                windows_cve_found = True  # ƒê√°nh d·∫•u ƒë√£ t√¨m th·∫•y CVE Windows
                cve_count_for_this_version += 1
            
            cve_dict[cve_id]["affected"].add(short_name)
            cve_dict[cve_id]["source"].add("NVD")

        # Th√¥ng b√°o cho t·ª´ng phi√™n b·∫£n Windows
        if cve_count_for_this_version > 0:
            print(f"  ‚úÖ {short_name}: {cve_count_for_this_version} CVE")
        else:
            print(f"  ‚úÖ {short_name}: 0 CVE")

    except Exception as e:
        print(f"  ‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu {short_name}: {e}")

# Th√¥ng b√°o n·∫øu Windows kh√¥ng c√≥ CVE n√†o
if not windows_cve_found:
    print("\nüéâ Tin t·ªët! H√¥m nay Windows kh√¥ng c√≥ CVE n√†o t·ª´ NVD.")
else:
    print(f"\n‚ö†Ô∏è T√¨m th·∫•y CVE Windows t·ª´ NVD!")

# ------------------- L·∫•y CVE t·ª´ Red Hat -------------------
print("\nüìä ƒêang t√¨m CVE Red Hat...")
redhat_url = f"https://access.redhat.com/hydra/rest/securitydata/cve.json?after={after_date}"
redhat_cve_found = False

try:
    resp = requests.get(redhat_url, timeout=30)
    if resp.status_code == 200:
        redhat_cves = resp.json()
        redhat_count = 0
        
        for item in redhat_cves:
            cve_id = item.get("CVE")
            severity = item.get("severity", "UNKNOWN").upper()

            # üëâ Ch·ªâ gi·ªØ l·∫°i important v√† critical
            if severity not in ["IMPORTANT", "CRITICAL"]:
                continue  

            desc = item.get("bugzilla_description") or \
                   (item.get("details", ["No description"])[0] if item.get("details") else "No description")
            score = item.get("cvss3_score") or item.get("cvss_score") or "N/A"
            public_date = item.get("public_date")

            if cve_id not in cve_dict:
                cve_dict[cve_id] = {
                    "severity": severity,
                    "score": score,
                    "desc": desc,
                    "affected": set(),
                    "source": set(),
                    "created": public_date or "N/A",
                    "updated": public_date or "N/A"
                }
                redhat_count += 1
                redhat_cve_found = True
                
            cve_dict[cve_id]["affected"].add("Red Hat")
            cve_dict[cve_id]["source"].add("Red Hat")
        
        if redhat_cve_found:
            print(f"  ‚úÖ Red Hat: {redhat_count} CVE (Important/Critical)")
        else:
            print("  üéâ Red Hat: Kh√¥ng c√≥ CVE Important/Critical n√†o!")

    else:
        print(f"  ‚ùå L·ªói khi g·ªçi API Red Hat: HTTP {resp.status_code}")

except Exception as e:
    print(f"  ‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ Red Hat API: {e}")
# ================= T·∫†O EMAIL CONTENT =================
def create_email_content(cve_data, windows_found, redhat_found):
    """T·∫°o n·ªôi dung email theo format y√™u c·∫ßu"""
    
    current_time = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")
    filter_date = (datetime.now(timezone.utc) - timedelta(days=5)).strftime("%Y-%m-%d")
    
    # ƒê·∫øm CVE Windows v√† Red Hat ri√™ng bi·ªát
    windows_cves = [cve_id for cve_id, data in cve_data.items() if "NVD" in data["source"]]
    redhat_cves = [cve_id for cve_id, data in cve_data.items() if "Red Hat" in data["source"]]
    
    subject = f"CVE Report - {len(windows_cves)} Windows CVE, {len(redhat_cves)} Red Hat CVE - {filter_date}"
    
    email_body = f"""Xin ch√†o,

Microsoft CVE: {len(windows_cves)} CVE t·ª´ h√¥m qua
Red Hat CVE: {len(redhat_cves)} CVE t·ª´ h√¥m qua

"""
    
    # Hi·ªÉn th·ªã top 10 CVE Windows
    if windows_cves:
        email_body += "=== TOP WINDOWS CVE ===\n"
        count = 1
        for cve_id in sorted(windows_cves)[:10]:
            data = cve_data[cve_id]
            created = data.get('created', 'N/A')
            updated = data.get('updated', 'N/A')
            desc = data['desc'][:80] + "..." if len(data['desc']) > 80 else data['desc']
            
            email_body += f"{count}. {cve_id} | Created: {created} | Updated: {updated}\n"
            email_body += f"    {desc}\n\n"
            count += 1
        
        if len(windows_cves) > 10:
            email_body += f"    ... v√† {len(windows_cves) - 10} CVE kh√°c (xem file JSON)\n\n"
    
    # Hi·ªÉn th·ªã top 10 CVE Red Hat
    if redhat_cves:
        email_body += "=== TOP RED HAT CVE ===\n"
        count = 1
        for cve_id in sorted(redhat_cves)[:10]:
            data = cve_data[cve_id]
            created = data.get('created', 'N/A')
            updated = data.get('updated', 'N/A')
            desc = data['desc'][:80] + "..." if len(data['desc']) > 80 else data['desc']
            
            email_body += f"{count}. {cve_id} | Created: {created} | Updated: {updated}\n"
            email_body += f"    {desc}\n\n"
            count += 1
        
        if len(redhat_cves) > 10:
            email_body += f"    ... v√† {len(redhat_cves) - 10} CVE kh√°c (xem file JSON)\n\n"
    
    if not windows_found and not redhat_found:
        email_body += "üéâ Kh√¥ng c√≥ CVE m·ªõi n√†o trong kho·∫£ng th·ªùi gian n√†y!\n\n"
    
    email_body += f"""Th·ªùi gian t·∫°o b√°o c√°o: {current_time}
Ngu·ªìn d·ªØ li·ªáu: NVD (nvd.nist.gov) v√† Red Hat Security Data API
Ng√†y l·ªçc: {filter_date}

Chi ti·∫øt ƒë·∫ßy ƒë·ªß vui l√≤ng xem file JSON ƒë√≠nh k√®m.

Vui l√≤ng kh√¥ng reply email n√†y, n·∫øu c√≥ th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá Ho√†ng Th√°i - hoangnghiathai.01@gmail.com

---
B√°o c√°o t·ª± ƒë·ªông t·ª´ CVE Monitor System"""
    
    return subject, email_body

def create_json_attachments(cve_data):
    """T·∫°o 2 file JSON ri√™ng cho Windows v√† Red Hat"""
    windows_json = {}
    redhat_json = {}

    for cve_id, data in cve_data.items():
        entry = {
            "severity": data["severity"],
            "score": data["score"],
            "description": data["desc"],
            "affected_systems": list(data["affected"]),
            "sources": list(data["source"]),
            "created": data.get("created", "N/A"),
            "updated": data.get("updated", "N/A")
        }

        if "NVD" in data["source"]:
            windows_json[cve_id] = entry
        if "Red Hat" in data["source"]:
            redhat_json[cve_id] = entry

    files = []

    if windows_json:
        win_filename = f"cve_windows_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(win_filename, 'w', encoding='utf-8') as f:
            json.dump(windows_json, f, indent=2, ensure_ascii=False)
        files.append(win_filename)

    if redhat_json:
        rh_filename = f"cve_redhat_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(rh_filename, 'w', encoding='utf-8') as f:
            json.dump(redhat_json, f, indent=2, ensure_ascii=False)
        files.append(rh_filename)

    return files

def send_email(subject, body, attachments=None):
    """G·ª≠i email qua Gmail SMTP (1 email k√®m nhi·ªÅu file)"""
    try:
        msg = MIMEMultipart()
        msg['From'] = GMAIL_USER
        msg['To'] = ", ".join(RECIPIENTS)
        msg['Subject'] = subject

        # Th√™m body email
        msg.attach(MIMEText(body, 'plain', 'utf-8'))

        # ƒê√≠nh k√®m nhi·ªÅu file n·∫øu c√≥
        if attachments:
            for file_path in attachments:
                if os.path.exists(file_path):
                    with open(file_path, "rb") as attachment:
                        part = MIMEBase('application', 'octet-stream')
                        part.set_payload(attachment.read())
                        encoders.encode_base64(part)
                        part.add_header(
                            'Content-Disposition',
                            f'attachment; filename={os.path.basename(file_path)}'
                        )
                        msg.attach(part)

        # G·ª≠i mail
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(GMAIL_USER, GMAIL_PASSWORD)
        server.sendmail(GMAIL_USER, RECIPIENTS, msg.as_string())
        server.quit()

        print("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!")
        return True

    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i email: {e}")
        return False

# ------------------- In k·∫øt qu·∫£ Console -------------------
print(f"\nüìà K·∫æT QU·∫¢ T·ªîNG H·ª¢P")
print("="*60)

if cve_dict:
    # S·∫Øp x·∫øp theo ƒë·ªô nghi√™m tr·ªçng
    severity_order = {"CRITICAL": 0, "HIGH": 1, "MEDIUM": 2, "LOW": 3, "UNKNOWN": 4}
    sorted_cves = sorted(cve_dict.items(), 
                        key=lambda x: (severity_order.get(x[1]["severity"], 5), x[0]))
    
    # Th√™m emoji theo ƒë·ªô nghi√™m tr·ªçng
    severity_emoji = {
        "CRITICAL": "üî¥",
        "HIGH": "üü†", 
        "MEDIUM": "üü°",
        "LOW": "üü¢",
        "UNKNOWN": "‚ö™"
    }
    
    for cve_id, data in sorted_cves:
        affected_str = ", ".join(sorted(data["affected"]))
        source_str = ", ".join(sorted(data["source"]))
        emoji = severity_emoji.get(data["severity"], "‚ö™")
        
        print(f"{emoji} {cve_id}: {data['severity']} ({data['score']}) - {data['desc'][:100]}{'...' if len(data['desc']) > 100 else ''}")
        print(f"   üìã ·∫¢nh h∆∞·ªüng: {affected_str}")
        print(f"   üìä Ngu·ªìn: {source_str}")
        print()
    
    print(f"üéØ T·ªïng c·ªông: {len(cve_dict)} CVE")
    
else:
    print("üéâ Tuy·ªát v·ªùi! Kh√¥ng c√≥ CVE nghi√™m tr·ªçng n√†o trong kho·∫£ng th·ªùi gian n√†y!")
    print("üîí H·ªá th·ªëng hi·ªán t·∫°i an to√†n t·ª´ c√°c l·ªó h·ªïng m·ªõi.")

# ================= G·ª¨I EMAIL =================
if GMAIL_USER != "your_email@gmail.com" and GMAIL_PASSWORD != "your_app_password":
    print(f"\nüìß ƒêang chu·∫©n b·ªã g·ª≠i email...")

    subject, email_body = create_email_content(cve_dict, windows_cve_found, redhat_cve_found)

    # T·∫°o file JSON
    attachments = []
    if cve_dict:
        attachments = create_json_attachments(cve_dict)
        for f in attachments:
            print(f"üìé ƒê√£ t·∫°o file attachment: {f}")

    # üëâ G·ª≠i email k√®m nhi·ªÅu file trong 1 mail duy nh·∫•t
    send_email(subject, email_body, attachments)

    # X√≥a file sau khi g·ª≠i
    for f in attachments:
        if os.path.exists(f):
            try:
                os.remove(f)
                print(f"üóëÔ∏è ƒê√£ x√≥a file t·∫°m: {f}")
            except:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file t·∫°m: {f}")
